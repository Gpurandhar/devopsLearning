# Start Minikube
minikube start

# Get the list of nodes
kubectl get nodes

# Display the Kubernetes configuration file
cat ~/.kube/config

# Create a deployment named "hello-minikube" with the specified image
kubectl create deployment hello-minikube --image=kicbase/echo-server:1.0

# Get the list of deployments
kubectl get deploy

# Get the list of pods
kubectl get pods

# Expose the deployment "hello-minikube" as a NodePort service on port 8080
kubectl expose deployment hello-minikube --type=NodePort --port=8080

# Get the URL of the exposed service
minikube service hello-minikube --url

# Get the list of services
kubectl get svc

# Delete the "hello-minikube" service
kubectl delete svc hello-minikube

# Delete the "hello-minikube" deployment
kubectl delete deploy hello-minikube

# Stop Minikube
minikube stop

# Delete the Minikube cluster
minikube delete


kubectl describe pod hello-kubeadm-5c96dc5bdf-s6fr8


-----------------------------------------------------------------------------------------------------

kubeadm --> installation step follow in internet --> commands also same


------------------------------------------------------------------------------------------------------

kops : 

kops create cluster --name=kubevpro.hkhinfoteck.xyz --state=s3://kopsstate956 --zones=us-east-1a,us-east-1b --node-count=2 --node-size=t3.small --control-plane-size=t3.medium --dns-zone=kubevpro.hkhinfoteck.xyz --node-volume-size=12 --control-plane-volume-size=12 --ssh-public-key ~/.ssh/id_ed25519.pub

kops update cluster --name=kubevpro.hkhinfoteck.xyz --state=s3://kopsstate956 --yes --admin

api.kubevpro.hkhinfoteck.xyz => IP

kubevpro.hkhinfoteck.xyz => godaddy NSRecord for Route53

NS Servers of routes => api => MasterNode

kops update validate --name=kubevpro.hkhinfoteck.xyz --state=s3://kopsstate956 

cat ~/.kube/config

kubectl get nodes

kops delete cluster --name=kubevpro.hkhinfoteck.xyz --state=s3://kopsstate956 --yes




--------------------------------------------------------------------------------------------------------------

https://docs.aws.amazon.com/eks/latest/userguide/getting-started-console.html

https://github.com/devopshydclub/vprofile-project/blob/kubernetes-setup

# Variables
CLUSTER_NAME=vprofile-eks-cluster
REGION=us-east-2
NODE_NAME=Linux-nodes
KEY_NAME=vprofile-eks-key

# Set AWS credentials before script execution

aws sts get-caller-identity >> /dev/null
if [ $? -eq 0 ]
then
  echo "Credentials tested, proceeding with the cluster creation."

  # Creation of EKS cluster
  eksctl create cluster \
  --name $CLUSTER_NAME \
  --version 1.20 \
  --region $REGION \
  --nodegroup-name $NODE_NAME \
  --nodes 2 \
  --nodes-min 1 \
  --nodes-max 4 \
  --node-type t3.micro \
  --node-volume-size 8 \
  --ssh-access \
  --ssh-public-key $KEY_NAME \
  --managed
  if [ $? -eq 0 ]
  then
    echo "Cluster Setup Completed with eksctl command."
  else
    echo "Cluster Setup Failed while running eksctl command."
  fi
else
  echo "Please run aws configure & set right credentials."
  echo "Cluster setup failed."
fi
==> it will  also create VPC with NAT gateway


aws --version
eksctl version
kubectl version

=>create IAM user 

cat .kube/config

kubectl get nodes

eksctl delete cluster vprofile-eks-cluster

